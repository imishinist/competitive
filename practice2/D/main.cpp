#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;

#define rep(i, n) for (int(i) = 0; (i) < (n); (i)++)
#define reps(i, ini, n) for (int(i) = (ini); (i) < (n); (i)++)
#define rev(i, n) for (int(i) = n; (i) >= 0; (i)--)
#define revs(i, from, to) for (int(i) = from; (i) >= to; (i)--)
#define eps 1e-14

// j
int dx[] = {0, 0, 1, -1};
// i
int dy[] = {1, -1, 0, 0};

void solve(long long N, long long M, std::vector<std::string> S) {
    atcoder::mf_graph<int> mf(N * M + 2);
    int odd = N * M;
    int even = odd + 1;

    rep(i, N) rep (j, M) {
        if (S[i][j] != '.') continue;
        if ((i + j) % 2 == 0) {
            mf.add_edge(even, i * M + j, 1);
            continue;
        } else {
            mf.add_edge(i * M + j, odd, 1);
        }

        // i + j => odd
        rep (d, 4) {
            // ni + nj => even
            int ni = i + dy[d], nj = j + dx[d];
            if (ni < 0 || ni >= N || nj < 0 || nj >= M) continue;
            if (S[ni][nj] == '.') {
                mf.add_edge(ni * M + nj, i * M + j, 1);
            }
        }

    }
    mf.flow(even, odd);

    int ans = 0;
    for (auto e : mf.edges()) {
        if (e.flow && e.from != even && e.to != odd) {
            ans++;
            int little = min(e.from, e.to);
            int big = max(e.from, e.to);

            int i = little / M;
            int j = little % M;
            int ni = big / M;
            int nj = big % M;
            if (i == ni) {
                S[i][j] = '>';
                S[i][nj] = '<';
            } else {
                S[i][j] = 'v';
                S[ni][j] = '^';
            }
        }
    }
    cout << ans << endl;
    for (auto s : S) {
        cout << s << endl;
    }
}

// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools templates:
// (https://github.com/imishinist/competitive/blob/master/boilerplate/main.cpp)
int main() {
    long long N;
    std::scanf("%lld", &N);
    long long M;
    std::scanf("%lld", &M);
    std::vector<std::string> S(N);
    for (int i = 0; i < N; i++) {
        std::cin >> S[i];
    }
    solve(N, M, std::move(S));
    return 0;
}
