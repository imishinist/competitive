#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

using ll = long long;

#define rep(i, n) for (int(i) = 0; (i) < (n); (i)++)
#define reps(i, ini, n) for (int(i) = (ini); (i) < (n); (i)++)
#define rev(i, n) for (int(i) = n; (i) >= 0; (i)--)
#define revs(i, from, to) for (int(i) = from; (i) >= to; (i)--)
#define eps 1e-14

void solve(std::string X, long long N, std::vector<std::string> S) {
    vector<int> mp(26);
    rep(i, X.size()) {
        // mp[X[26-i-1]-'a'] = i;
        mp[X[i]-'a'] = i;
    }

    function<string(string)> encode = [&](string s) -> string {
        string ans = "";
        rep(i, s.size()) {
            ans += mp[s[i]-'a'] + 'a';
        }
        return ans;
    };

    vector<pair<string, string>> ans(N);
    rep(i, N) {
        ans[i] = make_pair(encode(S[i]), S[i]);
    }
    sort(ans.begin(), ans.end());
    rep(i, N) {
        cout << ans[i].second << endl;
    }
}

// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools templates:
// (https://github.com/imishinist/competitive/blob/master/boilerplate/main.cpp)
int main() {
    std::string X;
    std::cin >> X;
    long long N;
    std::scanf("%lld", &N);
    std::vector<std::string> S(N);
    for (int i = 0; i < N; i++) {
        std::cin >> S[i];
    }
    solve(X, N, std::move(S));
    return 0;
}
