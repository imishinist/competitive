#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

using ll = long long;

#define rep(i, n) for (int(i) = 0; (i) < (n); (i)++)
#define reps(i, ini, n) for (int(i) = (ini); (i) < (n); (i)++)
#define rev(i, n) for (int(i) = n; (i) >= 0; (i)--)
#define revs(i, from, to) for (int(i) = from; (i) >= to; (i)--)
#define eps 1e-14


// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools templates:
// (https://github.com/imishinist/competitive/blob/master/boilerplate/main.cpp)
int main() {
    int M;
    cin >> M;
    vector<vector<int>> G(9);

    rep(i, M) {
        int u, v;
        cin >> u >> v;
        u--; v--;

        G[u].push_back(v);
        G[v].push_back(u);
    }

    vector<int> s(9, 8);
    rep(i, 8) {
        int p;
        cin >> p;
        p--;

        s[p] = i;
        // コマ i は、 pにいる
    }
    vector<int> g(9);
    rep(i, 9) g[i] = i;

    queue<pair<vector<int>, int>> q;
    q.push(make_pair(s, 0));

    const int INF = 1001001001;
    int ans = INF;
    map<vector<int>, int> memo;
    while(q.size()) {
        auto [st, cnt] = q.front(); q.pop();
        if (st == g) {
            ans = cnt;
            break;
        }
        if (memo.find(st) != memo.end()) {
            continue;
        }
        memo[st] = cnt;
        rep(i, 9) {
            if (st[i] == 8) {
                for (auto u : G[i]) {
                    swap(st[i], st[u]);
                    if (memo.find(st) == memo.end()) {
                        q.push(make_pair(st, cnt + 1));
                    }
                    swap(st[i], st[u]);
                }
            }
        }
    }
    if (ans == INF){
        cout << -1 << endl;
    } else {
        cout << ans << endl;
    }

    return 0;
}
