#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;

#define rep(i, n) for (int(i) = 0; (i) < (n); (i)++)
#define reps(i, ini, n) for (int(i) = (ini); (i) < (n); (i)++)
#define rev(i, n) for (int(i) = n; (i) >= 0; (i)--)
#define revs(i, from, to) for (int(i) = from; (i) >= to; (i)--)
#define eps 1e-14

const string YES = "Yes";
const string NO = "No";

// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools templates:
// (https://github.com/imishinist/competitive/blob/master/boilerplate/main.cpp)
int main() {
    int h, w;
    cin >> h >> w;

    vector<string> field(h);
    rep(i, h) cin >> field[i];

    bool ok = false;
    vector<vector<int>> memo = vector<vector<int>>(h, vector<int>(w));

    int dx[] = {1, -1, 0, 0};
    int dy[] = {0, 0, 1, -1};
    function<void(int, int)> dfs = [&](int i, int j) {
        if (field[i][j] == 'g') {
            ok = true;
            return;
        }
        if (memo[i][j] == 1) {
            return;
        }
        memo[i][j] = 1;

        rep(k, 4) {
            int nj = j + dx[k], ni = i + dy[k];
            if (nj < 0 || nj >= w || ni < 0 || ni >= h) continue;
            if (field[ni][nj] == '#') continue;
            dfs(ni, nj);
        }
    };
    rep(i, h) rep(j, w) {
        if (field[i][j] == 's') {
            dfs(i, j);
        }
    }
    if (ok) {
        cout << YES << endl;
    } else {
        cout << NO << endl;
    }

    return 0;
}
